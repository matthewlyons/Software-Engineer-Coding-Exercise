{"version":3,"sources":["components/api.js","App.js","serviceWorker.js","index.js"],"names":["API","state","month","year","lat","long","loading","show","coolingActivated","heatingActivated","handleMonthChange","bind","handleYearChange","today","Date","currentMonth","getMonth","this","setState","getFullYear","field","console","log","value","event","target","data","axios","post","then","res","catch","error","alert","response","message","result","years","i","push","reverse","Table","bordered","Container","onSubmit","handleSubmit","Row","Col","Form","Group","controlId","Label","Control","as","onChange","map","key","Button","onClick","className","Component","App","Jumbotron","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3f63765f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Container, Row, Col, Button, Form, Table } from \"react-bootstrap\";\r\n\r\nexport default class API extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      month: 1,\r\n      year: 2019,\r\n      lat: 45.5898,\r\n      long: -122.5951,\r\n      loading: false,\r\n      show: false,\r\n      coolingActivated: 0,\r\n      heatingActivated: 0\r\n    };\r\n    this.handleMonthChange = this.handleMonthChange.bind(this);\r\n    this.handleYearChange = this.handleYearChange.bind(this);\r\n  }\r\n  componentDidMount() {\r\n    var today = new Date();\r\n    var currentMonth = today.getMonth() + 1;\r\n    this.setState({\r\n      month: currentMonth,\r\n      year: today.getFullYear()\r\n    });\r\n  }\r\n\r\n  handleInputChange(field) {\r\n    console.log(field);\r\n    console.log(this.state);\r\n    return value => {\r\n      console.log(value);\r\n      this.setState({ [field]: value });\r\n    };\r\n  }\r\n\r\n  handleYearChange(event) {\r\n    this.setState({ year: event.target.value }, () => {\r\n      console.log(this.state);\r\n    });\r\n  }\r\n  handleMonthChange(event) {\r\n    this.setState({ month: event.target.value }, () => {\r\n      console.log(this.state);\r\n    });\r\n  }\r\n\r\n  onSubmit() {\r\n    console.log(\"Submit\");\r\n    this.setState({\r\n      loading: true\r\n    });\r\n    var data = {\r\n      month: this.state.month,\r\n      year: this.state.year,\r\n      lat: this.state.lat,\r\n      long: this.state.long\r\n    };\r\n    axios\r\n      .post(\"https://lyons-demo-app.herokuapp.com/api\", data)\r\n      .then(res => {\r\n        console.log(res.data);\r\n        var data = res.data;\r\n        this.setState({\r\n          coolingActivated: data.coolingActivated,\r\n          heatingActivated: data.heatingActivated,\r\n          show: true,\r\n          loading: false\r\n        });\r\n      })\r\n      .catch(function(error) {\r\n        alert(error.response.data.message);\r\n      })\r\n      .then(() => {\r\n        this.setState({\r\n          loading: false\r\n        });\r\n      });\r\n  }\r\n  render() {\r\n    const months = [\r\n      \"January\",\r\n      \"February\",\r\n      \"March\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"December\"\r\n    ];\r\n    var years = [];\r\n    for (var i = 1948; i <= 2030; i++) {\r\n      years.push(i);\r\n    }\r\n    years.reverse();\r\n    let result;\r\n\r\n    if (this.state.show) {\r\n      result = (\r\n        <Table bordered>\r\n          <tbody>\r\n            <tr>\r\n              <td>Cooling Activated</td>\r\n              <td>{this.state.coolingActivated}</td>\r\n            </tr>\r\n            <tr>\r\n              <td>Heating Activated</td>\r\n              <td>{this.state.heatingActivated}</td>\r\n            </tr>\r\n          </tbody>\r\n        </Table>\r\n      );\r\n    }\r\n\r\n    if (this.state.loading) {\r\n      result = <h1>Loading...</h1>;\r\n    }\r\n\r\n    return (\r\n      <Container>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <Row>\r\n            <Col>\r\n              <Form.Group controlId=\"exampleForm.ControlSelect1\">\r\n                <Form.Label>Select Month</Form.Label>\r\n                <Form.Control\r\n                  as=\"select\"\r\n                  value={this.state.month}\r\n                  onChange={this.handleMonthChange}\r\n                >\r\n                  {months.map((month, i) => (\r\n                    <option key={i + 1} value={i + 1}>\r\n                      {month}\r\n                    </option>\r\n                  ))}\r\n                </Form.Control>\r\n              </Form.Group>\r\n            </Col>\r\n            <Col>\r\n              <Form.Group controlId=\"exampleForm.ControlSelect1\">\r\n                <Form.Label>Select Year</Form.Label>\r\n                <Form.Control\r\n                  as=\"select\"\r\n                  value={this.state.year}\r\n                  onChange={this.handleYearChange}\r\n                >\r\n                  {years.map(year => {\r\n                    return (\r\n                      <option key={year} value={year}>\r\n                        {year}\r\n                      </option>\r\n                    );\r\n                  })}\r\n                </Form.Control>\r\n              </Form.Group>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <Button onClick={() => this.onSubmit()}>Submit</Button>\r\n            </Col>\r\n          </Row>\r\n        </form>\r\n        <Row className=\"mt-3\">\r\n          <Col>{result}</Col>\r\n        </Row>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport { Container, Jumbotron } from \"react-bootstrap\";\n\nimport API from \"./components/api\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Jumbotron>\n        <Container>\n          <h1>Hello!</h1>\n          <p>Welcome to the demo for the Dark Sky API wrapper.</p>\n          <p>\n            Submit a Month and Year below to find out how many times the\n            heating/ cooling came on!\n          </p>\n        </Container>\n      </Jumbotron>\n      <API />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}